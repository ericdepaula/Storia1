import Stripe from "stripe";
import dotenv from "dotenv";
import supabase from "../config/supabaseClient.js";
// A √öNICA importa√ß√£o de servi√ßo que precisamos agora √© a do 'conteudoService'.
import { conteudoService } from "./conteudoService.js";

dotenv.config();

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);
const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;

/**
 * Processa os eventos do webhook da Stripe.
 * Sua √∫nica responsabilidade √© validar o evento, registrar a compra
 * e delegar a gera√ß√£o de conte√∫do para o servi√ßo especialista.
 */
const processarWebhook = async (body, sig) => {
  let event;
  try {
    event = stripe.webhooks.constructEvent(body, sig, webhookSecret);
  } catch (err) {
    console.error(`‚ùå Assinatura do Webhook inv√°lida: ${err.message}`);
    throw { status: 400, message: `Webhook Error: ${err.message}` };
  }

  // Focamos apenas no evento que confirma o pagamento.
  if (event.type === "checkout.session.completed") {
    const session = event.data.object;
    console.log(`üîî Pagamento confirmado. Sess√£o ID: ${session.id}`);

    // Verificamos se a compra j√° foi processada para evitar duplicatas.
    const { data: compraExistente } = await supabase
      .from('compras')
      .select('id')
      .eq('stripe_session_id', session.id)
      .single();

    if (compraExistente) {
      console.warn(`Webhook para a sess√£o ${session.id} j√° foi processado. Ignorando.`);
      return; // Para a execu√ß√£o para evitar duplicatas.
    }

    try {
      const lineItems = await stripe.checkout.sessions.listLineItems(session.id);
      if (lineItems.data.length === 0) throw new Error("Sess√£o sem produtos.");

      // --- ETAPA 1: REGISTRO DA "COMANDA" ---
      console.log(`üíæ Registrando a compra para o usu√°rio ${session.client_reference_id}...`);
      const { data: novaCompra, error: compraError } = await supabase
        .from("compras")
        .insert({
          usuario_id: session.client_reference_id,
          stripe_session_id: session.id,
          produto_id: lineItems.data[0].price.product,
          preco_id: lineItems.data[0].price.id,
          valor_total: session.amount_total / 100,
          status_pagamento: session.payment_status,
          status_entrega: "PENDENTE", // Status inicial
        })
        .select()
        .single();

      if (compraError) {
        throw new Error(`Erro CR√çTICO ao salvar a compra: ${compraError.message}`);
      }
      console.log(`üõí Compra ${novaCompra.id} registrada com sucesso com status PENDENTE.`);

      // --- ETAPA 2: DELEGA√á√ÉO PARA O "CHEF" ---
      // Chamamos o especialista em conte√∫do para fazer o trabalho pesado.
      // Passamos o registro da compra e os dados do formul√°rio.
      await conteudoService.gerarConteudoPago(novaCompra, session.metadata);

    } catch (err) {
      console.error(`====== ‚ùå ERRO GERAL NO PROCESSAMENTO DO WEBHOOK ======`);
      console.error(`Sess√£o da Stripe ID: ${session.id}. Erro: ${err.message}`);
      // Em um sistema de produ√ß√£o, voc√™ poderia enviar um alerta para um administrador aqui.
    }
  }
};

export const webhookService = {
  processarWebhook,
};